{"filter":false,"title":"BT-MinDepth.py","tooltip":"/Tree/BT-MinDepth.py","undoManager":{"mark":5,"position":5,"stack":[[{"start":{"row":0,"column":0},"end":{"row":20,"column":8},"action":"remove","lines":["\"\"\"","https://leetcode.com/problems/maximum-depth-of-binary-tree/","","\"\"\"","# Definition for a binary tree node.","class TreeNode:","    def __init__(self, val=0, left=None, right=None):","        self.val = val","        self.left = left","        self.right = right","class Solution:","    import math","    def maxDepth(self, root: TreeNode) -> int:","        if not root:","            return 0","        if root.left==None and root.right==None:","            return 1","        leftD=self.maxDepth(root.left) if root.left else -math.inf","        rightD=self.maxDepth(root.right) if root.right else -math.inf","        return 1 + max(leftD, rightD)","        "],"id":2},{"start":{"row":0,"column":0},"end":{"row":16,"column":8},"action":"insert","lines":["# Definition for a binary tree node.","# class TreeNode:","#     def __init__(self, val=0, left=None, right=None):","#         self.val = val","#         self.left = left","#         self.right = right","class Solution:","    import math","    def minDepth(self, root: TreeNode) -> int:","        if not root:","            return 0","        if root.left==None and root.right==None:","            return 1","        leftD=self.minDepth(root.left) if root.left else math.inf","        rightD=self.minDepth(root.right) if root.right else math.inf","        return 1 + min(leftD, rightD)","        "]}],[{"start":{"row":1,"column":0},"end":{"row":1,"column":2},"action":"remove","lines":["# "],"id":3},{"start":{"row":2,"column":0},"end":{"row":2,"column":2},"action":"remove","lines":["# "]},{"start":{"row":3,"column":0},"end":{"row":3,"column":2},"action":"remove","lines":["# "]},{"start":{"row":4,"column":0},"end":{"row":4,"column":2},"action":"remove","lines":["# "]},{"start":{"row":5,"column":0},"end":{"row":5,"column":2},"action":"remove","lines":["# "]}],[{"start":{"row":0,"column":36},"end":{"row":1,"column":0},"action":"insert","lines":["",""],"id":4},{"start":{"row":1,"column":0},"end":{"row":1,"column":1},"action":"insert","lines":["#"]}],[{"start":{"row":1,"column":1},"end":{"row":1,"column":2},"action":"insert","lines":[" "],"id":5}],[{"start":{"row":1,"column":2},"end":{"row":1,"column":61},"action":"insert","lines":["https://leetcode.com/problems/minimum-depth-of-binary-tree/"],"id":6}],[{"start":{"row":1,"column":61},"end":{"row":2,"column":0},"action":"insert","lines":["",""],"id":7}]]},"ace":{"folds":[],"scrolltop":0,"scrollleft":0,"selection":{"start":{"row":18,"column":8},"end":{"row":18,"column":8},"isBackwards":false},"options":{"guessTabSize":true,"useWrapMode":false,"wrapToView":true},"firstLineState":{"row":10,"state":"start","mode":"ace/mode/python"}},"timestamp":1608921598786,"hash":"f7c55210e08f6f9a97435034f2331196bab4aa72"}