{"filter":false,"title":"BT-Lowest_common_ancestor.py","tooltip":"/Tree/BT-Lowest_common_ancestor.py","undoManager":{"mark":5,"position":5,"stack":[[{"start":{"row":1,"column":0},"end":{"row":1,"column":23},"action":"remove","lines":["Your module description"],"id":1},{"start":{"row":1,"column":0},"end":{"row":1,"column":78},"action":"insert","lines":["https://leetcode.com/explore/interview/card/facebook/52/trees-and-graphs/3024/"]}],[{"start":{"row":2,"column":3},"end":{"row":3,"column":0},"action":"insert","lines":["",""],"id":2},{"start":{"row":3,"column":0},"end":{"row":4,"column":0},"action":"insert","lines":["",""]}],[{"start":{"row":4,"column":0},"end":{"row":32,"column":8},"action":"insert","lines":["# Definition for a binary tree node.","# class TreeNode:","#     def __init__(self, x):","#         self.val = x","#         self.left = None","#         self.right = None","","class Solution:","    def lca(self, root, p, q):","        if root==None:","            return None","","        if root==p or root==q:","            return root","        ","        left = self.lca(root.left, p, q)","        right = self.lca(root.right, p, q)","        ","        if left==None and right==None:","            return None","        ","        if left!=None and right!=None:","            return root","        ","        return left if left else right","        ","    def lowestCommonAncestor(self, root: 'TreeNode', p: 'TreeNode', q: 'TreeNode') -> 'TreeNode':","        return self.lca(root, p, q)","        "],"id":3}],[{"start":{"row":1,"column":78},"end":{"row":2,"column":0},"action":"insert","lines":["",""],"id":4}],[{"start":{"row":2,"column":0},"end":{"row":2,"column":71},"action":"insert","lines":["https://www.geeksforgeeks.org/lowest-common-ancestor-binary-tree-set-1/"],"id":5}],[{"start":{"row":12,"column":0},"end":{"row":32,"column":35},"action":"remove","lines":["class Solution:","    def lca(self, root, p, q):","        if root==None:","            return None","","        if root==p or root==q:","            return root","        ","        left = self.lca(root.left, p, q)","        right = self.lca(root.right, p, q)","        ","        if left==None and right==None:","            return None","        ","        if left!=None and right!=None:","            return root","        ","        return left if left else right","        ","    def lowestCommonAncestor(self, root: 'TreeNode', p: 'TreeNode', q: 'TreeNode') -> 'TreeNode':","        return self.lca(root, p, q)"],"id":6},{"start":{"row":12,"column":0},"end":{"row":46,"column":20},"action":"insert","lines":["class Node:","","\t# A utility function to create a new node","\tdef __init__(self, key):","\t\tself.data = key ","\t\tself.left = None","\t\tself.right = None","","\t\t\t","def lca(root,p,q):","    if not root:","        return None","    if root.data==p or root.data==q:","    \treturn root.data","    ","    left = lca(root.left, p, q)","    right = lca(root.right, p, q)","    if left==None and right==None:","    \treturn None","    if left!=None and right!=None:","    \treturn root.data","    return left if left else right","    ","        ","        ","","# Driver program to test above function","root = Node(1)","root.left = Node(2)","root.right = Node(3)","root.left.left = Node(4)","root.left.right = Node(5)","root.left.left.left = Node(6)","","print(lca(root,6,5))"]}]]},"ace":{"folds":[],"scrolltop":0,"scrollleft":0,"selection":{"start":{"row":9,"column":26},"end":{"row":9,"column":26},"isBackwards":false},"options":{"guessTabSize":true,"useWrapMode":false,"wrapToView":true},"firstLineState":0},"timestamp":1608956779337,"hash":"88430055d74bf3e8ba726c15216df04799e0f4b0"}