{"changed":false,"filter":false,"title":"BT-view-right.py","tooltip":"/Tree/BT-view-right.py","undoManager":{"mark":11,"position":11,"stack":[[{"start":{"row":10,"column":0},"end":{"row":23,"column":21},"action":"remove","lines":["class Solution:","    def rightSideView(self, root: TreeNode) -> List[int]:","        result = []","        if root:","            queue = Queue()","            queue.put_nowait((root, 0))","            while not queue.empty():","                node, d = queue.get_nowait()","                if len(result) == d:","                    result.append(node.val)","                for child in (node.right, node.left, ):","                    if child:","                        queue.put_nowait((child, d + 1))","        return result"],"id":2}],[{"start":{"row":9,"column":0},"end":{"row":9,"column":2},"action":"insert","lines":["''"],"id":3}],[{"start":{"row":9,"column":2},"end":{"row":9,"column":3},"action":"insert","lines":["'"],"id":4}],[{"start":{"row":9,"column":3},"end":{"row":10,"column":0},"action":"insert","lines":["",""],"id":5}],[{"start":{"row":10,"column":0},"end":{"row":10,"column":2},"action":"insert","lines":["''"],"id":6}],[{"start":{"row":10,"column":2},"end":{"row":10,"column":3},"action":"insert","lines":["'"],"id":7}],[{"start":{"row":9,"column":3},"end":{"row":10,"column":0},"action":"insert","lines":["",""],"id":8}],[{"start":{"row":10,"column":0},"end":{"row":23,"column":21},"action":"insert","lines":["class Solution:","    def rightSideView(self, root: TreeNode) -> List[int]:","        result = []","        if root:","            queue = Queue()","            queue.put_nowait((root, 0))","            while not queue.empty():","                node, d = queue.get_nowait()","                if len(result) == d:","                    result.append(node.val)","                for child in (node.right, node.left, ):","                    if child:","                        queue.put_nowait((child, d + 1))","        return result"],"id":9}],[{"start":{"row":27,"column":1},"end":{"row":27,"column":2},"action":"remove","lines":[" "],"id":10},{"start":{"row":27,"column":0},"end":{"row":27,"column":1},"action":"remove","lines":[" "]},{"start":{"row":26,"column":8},"end":{"row":27,"column":6},"action":"remove","lines":["","      "]},{"start":{"row":26,"column":4},"end":{"row":26,"column":8},"action":"remove","lines":["    "]},{"start":{"row":26,"column":0},"end":{"row":26,"column":4},"action":"remove","lines":["    "]},{"start":{"row":25,"column":0},"end":{"row":26,"column":0},"action":"remove","lines":["",""]}],[{"start":{"row":8,"column":69},"end":{"row":9,"column":0},"action":"insert","lines":["",""],"id":11},{"start":{"row":9,"column":0},"end":{"row":10,"column":0},"action":"insert","lines":["",""]},{"start":{"row":10,"column":0},"end":{"row":11,"column":0},"action":"insert","lines":["",""]},{"start":{"row":11,"column":0},"end":{"row":12,"column":0},"action":"insert","lines":["",""]}],[{"start":{"row":10,"column":0},"end":{"row":11,"column":0},"action":"insert","lines":["",""],"id":12}],[{"start":{"row":11,"column":0},"end":{"row":57,"column":0},"action":"insert","lines":["\"\"\"","Your module description","\"\"\"","","# Recursive Python program for level ","# order traversal of Binary Tree","","# A node structure","class Node:","","\t# A utility function to create a new node","\tdef __init__(self, key):","\t\tself.data = key ","\t\tself.left = None","\t\tself.right = None","","","import math","import queue","","def rightView(root):","    result = []","    if root:","        q = queue.Queue()","        q.put_nowait((root, 0))","        while not q.empty():","            node, d = q.get_nowait()","            if len(result) == d:","                result.append(node.data)","            for child in (node.right, node.left, ):","                if child:","                    q.put_nowait((child, d + 1))","    return result","\t\t","        ","        ","","# Driver program to test above function","root = Node(1)","root.left = Node(2)","root.right = Node(3)","root.left.left = Node(4)","root.left.right = Node(5)","root.left.left.left = Node(6)","res=[]","print(rightView(root))",""],"id":13}]]},"ace":{"folds":[],"scrolltop":341,"scrollleft":0,"selection":{"start":{"row":20,"column":0},"end":{"row":20,"column":0},"isBackwards":false},"options":{"guessTabSize":true,"useWrapMode":false,"wrapToView":true},"firstLineState":{"row":16,"state":"start","mode":"ace/mode/python"}},"timestamp":1608959451240}