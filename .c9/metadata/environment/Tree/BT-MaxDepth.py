{"filter":false,"title":"BT-MaxDepth.py","tooltip":"/Tree/BT-MaxDepth.py","undoManager":{"mark":7,"position":7,"stack":[[{"start":{"row":3,"column":0},"end":{"row":19,"column":8},"action":"insert","lines":["# Definition for a binary tree node.","# class TreeNode:","#     def __init__(self, val=0, left=None, right=None):","#         self.val = val","#         self.left = left","#         self.right = right","class Solution:","    import math","    def maxDepth(self, root: TreeNode) -> int:","        if not root:","            return 0","        if root.left==None and root.right==None:","            return 1","        leftD=self.maxDepth(root.left) if root.left else -math.inf","        rightD=self.maxDepth(root.right) if root.right else -math.inf","        return 1 + max(leftD, rightD)","        "],"id":2}],[{"start":{"row":3,"column":0},"end":{"row":3,"column":2},"action":"remove","lines":["# "],"id":3},{"start":{"row":4,"column":0},"end":{"row":4,"column":2},"action":"remove","lines":["# "]},{"start":{"row":5,"column":0},"end":{"row":5,"column":2},"action":"remove","lines":["# "]},{"start":{"row":6,"column":0},"end":{"row":6,"column":2},"action":"remove","lines":["# "]},{"start":{"row":7,"column":0},"end":{"row":7,"column":2},"action":"remove","lines":["# "]},{"start":{"row":8,"column":0},"end":{"row":8,"column":2},"action":"remove","lines":["# "]}],[{"start":{"row":3,"column":0},"end":{"row":3,"column":2},"action":"insert","lines":["# "],"id":4}],[{"start":{"row":1,"column":0},"end":{"row":1,"column":23},"action":"remove","lines":["Your module description"],"id":5},{"start":{"row":1,"column":0},"end":{"row":1,"column":59},"action":"insert","lines":["https://leetcode.com/problems/maximum-depth-of-binary-tree/"]}],[{"start":{"row":1,"column":59},"end":{"row":2,"column":0},"action":"insert","lines":["",""],"id":6}],[{"start":{"row":4,"column":0},"end":{"row":20,"column":8},"action":"remove","lines":["# Definition for a binary tree node.","class TreeNode:","    def __init__(self, val=0, left=None, right=None):","        self.val = val","        self.left = left","        self.right = right","class Solution:","    import math","    def maxDepth(self, root: TreeNode) -> int:","        if not root:","            return 0","        if root.left==None and root.right==None:","            return 1","        leftD=self.maxDepth(root.left) if root.left else -math.inf","        rightD=self.maxDepth(root.right) if root.right else -math.inf","        return 1 + max(leftD, rightD)","        "],"id":7,"ignore":true}],[{"start":{"row":2,"column":0},"end":{"row":20,"column":8},"action":"insert","lines":["","","# Definition for a binary tree node.","class TreeNode:","    def __init__(self, val=0, left=None, right=None):","        self.val = val","        self.left = left","        self.right = right","class Solution:","    import math","    def maxDepth(self, root: TreeNode) -> int:","        if not root:","            return 0","        if root.left==None and root.right==None:","            return 1","        leftD=self.maxDepth(root.left) if root.left else -math.inf","        rightD=self.maxDepth(root.right) if root.right else -math.inf","        return 1 + max(leftD, rightD)","        "],"id":8,"ignore":true}],[{"start":{"row":22,"column":0},"end":{"row":60,"column":0},"action":"insert","lines":["\"\"\"","Your module description","\"\"\"","","# Recursive Python program for level ","# order traversal of Binary Tree","","# A node structure","class Node:","","\t# A utility function to create a new node","\tdef __init__(self, key):","\t\tself.data = key ","\t\tself.left = None","\t\tself.right = None","","","import math","def maxdepth(root):","\tif not root:","\t\treturn 0","\tif root.left is None and root.right==None:","\t\treturn 1","\tld=maxdepth(root.left) if root.left else -math.inf","\trd=maxdepth(root.right) if root.right else -math.inf","\treturn max(ld,rd)+1","        ","        ","","# Driver program to test above function","root = Node(1)","root.left = Node(2)","root.right = Node(3)","root.left.left = Node(4)","root.left.right = Node(5)","root.left.left.left = Node(6)","","print(maxdepth(root))",""],"id":9,"ignore":true}]]},"ace":{"folds":[],"scrolltop":251.5,"scrollleft":0,"selection":{"start":{"row":22,"column":0},"end":{"row":22,"column":0},"isBackwards":false},"options":{"guessTabSize":true,"useWrapMode":false,"wrapToView":true},"firstLineState":{"row":9,"state":"qqstring3","mode":"ace/mode/python"}},"timestamp":1608921457003,"hash":"e8d3a83da8746cf3c00c85ed1ae10e5d8b01dfe7"}