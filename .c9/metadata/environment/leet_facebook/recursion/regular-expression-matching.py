{"filter":false,"title":"regular-expression-matching.py","tooltip":"/leet_facebook/recursion/regular-expression-matching.py","ace":{"folds":[],"scrolltop":0,"scrollleft":0,"selection":{"start":{"row":3,"column":3},"end":{"row":3,"column":3},"isBackwards":false},"options":{"guessTabSize":true,"useWrapMode":false,"wrapToView":true},"firstLineState":{"row":17,"state":"start","mode":"ace/mode/python"}},"hash":"2d42c87290b435c7850f94882d18443d1f0300ec","undoManager":{"mark":0,"position":0,"stack":[[{"start":{"row":0,"column":0},"end":{"row":3,"column":0},"action":"remove","lines":["\"\"\"","Your module description","\"\"\"",""],"id":1},{"start":{"row":0,"column":0},"end":{"row":34,"column":0},"action":"insert","lines":["\"\"\"","https://leetcode.com/problems/regular-expression-matching/solution/","","\"\"\"","","","def match(text, pattern):","    if not pattern: return not text","    first_match = bool(text) and pattern[0] in (text[0])","    # for abc and abc; first we check a,a; then b,b and c,c","    # each time we ensure aa i.e., first_match is met, then","    # call match(bc,bc) if b,b is good, then call match(c,c)","    # if all aa, bb and cc match and no pattern left, retun true","    return first_match and match(text[1:], pattern[1:])","                ","","def isMatch(text, pattern):","    if not pattern:","        print(not text)","        return not text","","    first_match = bool(text) and pattern[0] in {text[0], '.'}","","    if len(pattern) >= 2 and pattern[1] == '*':","        return (isMatch(text, pattern[2:]) or","                first_match and isMatch(text[1:], pattern))","    else:","        return first_match and isMatch(text[1:], pattern[1:])","","","text = \"aa\"","pattern = \"a*\"","print(match(text,pattern))","print(isMatch(text, pattern))",""]}]]},"timestamp":1608697039918}