{"filter":false,"title":"KthLargestInArray.cpp","tooltip":"/MinHeap/KthLargestInArray.cpp","ace":{"folds":[],"scrolltop":0,"scrollleft":0,"selection":{"start":{"row":13,"column":31},"end":{"row":13,"column":31},"isBackwards":false},"options":{"guessTabSize":true,"useWrapMode":false,"wrapToView":true},"firstLineState":0},"hash":"11696090f9239a11186e8e3544cfebcb57c01d53","undoManager":{"mark":49,"position":49,"stack":[[{"start":{"row":0,"column":0},"end":{"row":5,"column":1},"action":"remove","lines":["#include <iostream>","","int main()","{","\tstd::cout << \"Hello from AWS Cloud9!\" << std::endl;","}"],"id":1},{"start":{"row":0,"column":0},"end":{"row":144,"column":0},"action":"insert","lines":["#include <iostream> ","using namespace std; ","","// Swap function to interchange ","// the value of variables x and y ","int swap(int& x, int& y) ","{ ","\tint temp = x; ","\tx = y; ","\ty = temp; ","} ","","// Min Heap Class ","// arr holds reference to an integer ","// array size indicate the number of ","// elements in Min Heap ","class MinHeap { ","","\tint size; ","\tint* arr; ","","public: ","\t// Constructor to initialize the size and arr ","\tMinHeap(int size, int input[]); ","","\t// Min Heapify function, that assumes that ","\t// 2*i+1 and 2*i+2 are min heap and fix the ","\t// heap property for i. ","\tvoid heapify(int i); ","","\t// Build the min heap, by calling heapify ","\t// for all non-leaf nodes. ","\tvoid buildHeap(); ","}; ","","// Constructor to initialize data ","// members and creating mean heap ","MinHeap::MinHeap(int size, int input[]) ","{ ","\t// Initializing arr and size ","","\tthis->size = size; ","\tthis->arr = input; ","","\t// Building the Min Heap ","\tbuildHeap(); ","} ","","// Min Heapify function, that assumes ","// 2*i+1 and 2*i+2 are min heap and ","// fix min heap property for i ","","void MinHeap::heapify(int i) ","{ ","\t// If Leaf Node, Simply return ","\tif (i >= size / 2) ","\t\treturn; ","","\t// variable to store the smallest element ","\t// index out of i, 2*i+1 and 2*i+2 ","\tint smallest; ","","\t// Index of left node ","\tint left = 2 * i + 1; ","","\t// Index of right node ","\tint right = 2 * i + 2; ","","\t// Select minimum from left node and ","\t// current node i, and store the minimum ","\t// index in smallest variable ","\tsmallest = arr[left] < arr[i] ? left : i; ","","\t// If right child exist, compare and ","\t// update the smallest variable ","\tif (right < size) ","\t\tsmallest = arr[right] < arr[smallest] ","\t\t\t\t\t\t\t? right : smallest; ","","\t// If Node i violates the min heap ","\t// property, swap current node i with ","\t// smallest to fix the min-heap property ","\t// and recursively call heapify for node smallest. ","\tif (smallest != i) { ","\t\tswap(arr[i], arr[smallest]); ","\t\theapify(smallest); ","\t} ","} ","","// Build Min Heap ","void MinHeap::buildHeap() ","{ ","\t// Calling Heapify for all non leaf nodes ","\tfor (int i = size / 2 - 1; i >= 0; i--) { ","\t\theapify(i); ","\t} ","} ","","void FirstKelements(int arr[],int size,int k){ ","\t// Creating Min Heap for given ","\t// array with only k elements ","\tMinHeap* m = new MinHeap(k, arr); ","","\t// Loop For each element in array ","\t// after the kth element ","\tfor (int i = k; i < size; i++) { ","","\t\t// if current element is smaller ","\t\t// than minimum element, do nothing ","\t\t// and continue to next element ","\t\tif (arr[0] > arr[i]) ","\t\t\tcontinue; ","","\t\t// Otherwise Change minimum element to ","\t\t// current element, and call heapify to ","\t\t// restore the heap property ","\t\telse { ","\t\t\tarr[0] = arr[i]; ","\t\t\tm->heapify(0); ","\t\t} ","\t} ","\t// Now min heap contains k maximum ","\t// elements, Iterate and print ","\tfor (int i = 0; i < k; i++) { ","\t\tcout << arr[i] << \" \"; ","\t} ","} ","// Driver Program ","int main() ","{ ","","\tint arr[] = { 11, 3, 2, 1, 15, 5, 4, ","\t\t\t\t\t\t45, 88, 96, 50, 45 }; ","","\tint size = sizeof(arr) / sizeof(arr[0]); ","","\t// Size of Min Heap ","\tint k = 3; ","","\tFirstKelements(arr,size,k); ","","\treturn 0; ","} ","// This code is contributed by Ankur Goel ",""]}],[{"start":{"row":0,"column":0},"end":{"row":1,"column":0},"action":"insert","lines":["",""],"id":2}],[{"start":{"row":1,"column":0},"end":{"row":2,"column":0},"action":"insert","lines":["",""],"id":3}],[{"start":{"row":2,"column":0},"end":{"row":3,"column":0},"action":"insert","lines":["",""],"id":4}],[{"start":{"row":3,"column":0},"end":{"row":3,"column":1},"action":"insert","lines":["/"],"id":5}],[{"start":{"row":3,"column":1},"end":{"row":3,"column":2},"action":"insert","lines":["*"],"id":6}],[{"start":{"row":3,"column":2},"end":{"row":3,"column":3},"action":"insert","lines":["*"],"id":7}],[{"start":{"row":3,"column":3},"end":{"row":3,"column":4},"action":"insert","lines":["/"],"id":8}],[{"start":{"row":3,"column":2},"end":{"row":4,"column":0},"action":"insert","lines":["",""],"id":9}],[{"start":{"row":4,"column":0},"end":{"row":5,"column":0},"action":"insert","lines":["",""],"id":10}],[{"start":{"row":5,"column":2},"end":{"row":6,"column":0},"action":"insert","lines":["",""],"id":12}],[{"start":{"row":6,"column":0},"end":{"row":7,"column":0},"action":"insert","lines":["",""],"id":13}],[{"start":{"row":4,"column":0},"end":{"row":4,"column":1},"action":"insert","lines":["c"],"id":14}],[{"start":{"row":4,"column":1},"end":{"row":4,"column":2},"action":"insert","lines":["a"],"id":15}],[{"start":{"row":4,"column":2},"end":{"row":4,"column":3},"action":"insert","lines":["b"],"id":16}],[{"start":{"row":4,"column":3},"end":{"row":4,"column":4},"action":"insert","lines":[" "],"id":17}],[{"start":{"row":4,"column":3},"end":{"row":4,"column":4},"action":"remove","lines":[" "],"id":18}],[{"start":{"row":4,"column":2},"end":{"row":4,"column":3},"action":"remove","lines":["b"],"id":19}],[{"start":{"row":4,"column":2},"end":{"row":4,"column":3},"action":"insert","lines":["n"],"id":20}],[{"start":{"row":4,"column":3},"end":{"row":4,"column":4},"action":"insert","lines":[" "],"id":21}],[{"start":{"row":4,"column":4},"end":{"row":4,"column":5},"action":"insert","lines":["a"],"id":22}],[{"start":{"row":4,"column":5},"end":{"row":4,"column":6},"action":"insert","lines":["l"],"id":23}],[{"start":{"row":4,"column":6},"end":{"row":4,"column":7},"action":"insert","lines":["s"],"id":24}],[{"start":{"row":4,"column":7},"end":{"row":4,"column":8},"action":"insert","lines":["o"],"id":25}],[{"start":{"row":4,"column":8},"end":{"row":4,"column":9},"action":"insert","lines":[" "],"id":26}],[{"start":{"row":4,"column":9},"end":{"row":4,"column":10},"action":"insert","lines":["d"],"id":27}],[{"start":{"row":4,"column":10},"end":{"row":4,"column":11},"action":"insert","lines":["o"],"id":28}],[{"start":{"row":4,"column":11},"end":{"row":4,"column":12},"action":"insert","lines":[" "],"id":29}],[{"start":{"row":4,"column":12},"end":{"row":4,"column":13},"action":"insert","lines":["t"],"id":30}],[{"start":{"row":4,"column":13},"end":{"row":4,"column":14},"action":"insert","lines":["h"],"id":31}],[{"start":{"row":4,"column":14},"end":{"row":4,"column":15},"action":"insert","lines":["i"],"id":32}],[{"start":{"row":4,"column":15},"end":{"row":4,"column":16},"action":"insert","lines":["s"],"id":33}],[{"start":{"row":4,"column":16},"end":{"row":4,"column":17},"action":"insert","lines":[" "],"id":34}],[{"start":{"row":4,"column":17},"end":{"row":4,"column":18},"action":"insert","lines":["b"],"id":35}],[{"start":{"row":4,"column":18},"end":{"row":4,"column":19},"action":"insert","lines":["y"],"id":36}],[{"start":{"row":4,"column":19},"end":{"row":4,"column":20},"action":"insert","lines":[" "],"id":37}],[{"start":{"row":4,"column":20},"end":{"row":4,"column":21},"action":"insert","lines":["s"],"id":38}],[{"start":{"row":4,"column":21},"end":{"row":4,"column":22},"action":"insert","lines":["o"],"id":39}],[{"start":{"row":4,"column":22},"end":{"row":4,"column":23},"action":"insert","lines":["r"],"id":40}],[{"start":{"row":4,"column":23},"end":{"row":4,"column":24},"action":"insert","lines":["t"],"id":41}],[{"start":{"row":4,"column":24},"end":{"row":4,"column":25},"action":"insert","lines":["i"],"id":42}],[{"start":{"row":4,"column":25},"end":{"row":4,"column":26},"action":"insert","lines":["n"],"id":43}],[{"start":{"row":4,"column":26},"end":{"row":4,"column":27},"action":"insert","lines":["g"],"id":44}],[{"start":{"row":4,"column":27},"end":{"row":5,"column":0},"action":"insert","lines":["",""],"id":45}],[{"start":{"row":5,"column":0},"end":{"row":14,"column":1},"action":"insert","lines":["void kLargest(int arr[], int n, int k) ","{ ","    // Sort the given array arr in reverse ","    // order. ","    sort(arr, arr + n, greater<int>()); ","  ","    // Print the first kth largest elements ","    for (int i = 0; i < k; i++) ","        cout << arr[i] << \" \"; ","}"],"id":46}],[{"start":{"row":14,"column":1},"end":{"row":15,"column":0},"action":"insert","lines":["",""],"id":47}],[{"start":{"row":15,"column":0},"end":{"row":16,"column":0},"action":"insert","lines":["",""],"id":48}],[{"start":{"row":0,"column":0},"end":{"row":0,"column":1},"action":"insert","lines":["/"],"id":49}],[{"start":{"row":0,"column":1},"end":{"row":0,"column":2},"action":"insert","lines":["/"],"id":50}],[{"start":{"row":0,"column":2},"end":{"row":0,"column":74},"action":"insert","lines":["https://www.geeksforgeeks.org/k-largestor-smallest-elements-in-an-array/"],"id":51}]]},"timestamp":1563330416955}