{"filter":false,"title":"given-a-binary-tree-print-all-root-to-leaf-paths.cpp","tooltip":"/AmazonEasy/given-a-binary-tree-print-all-root-to-leaf-paths.cpp","ace":{"folds":[],"scrolltop":0,"scrollleft":0,"selection":{"start":{"row":90,"column":32},"end":{"row":90,"column":32},"isBackwards":false},"options":{"guessTabSize":true,"useWrapMode":false,"wrapToView":true},"firstLineState":0},"hash":"4f578d0ef1a2c3fae1850ae7855fcb3168e1ef33","undoManager":{"mark":0,"position":0,"stack":[[{"start":{"row":0,"column":0},"end":{"row":5,"column":1},"action":"remove","lines":["#include <iostream>","","int main()","{","\tstd::cout << \"Hello from AWS Cloud9!\" << std::endl;","}"],"id":1},{"start":{"row":0,"column":0},"end":{"row":99,"column":0},"action":"insert","lines":["#include <bits/stdc++.h> ","using namespace std; ","","/* A binary tree node has data, pointer to left child ","and a pointer to right child */","class node ","{ ","\tpublic: ","\tint data; ","\tnode* left; ","\tnode* right; ","}; ","","/* Prototypes for funtions needed in printPaths() */","void printPathsRecur(node* node, int path[], int pathLen); ","void printArray(int ints[], int len); ","","/*Given a binary tree, print out all of its root-to-leaf ","paths, one per line. Uses a recursive helper to do the work.*/","void printPaths(node* node) ","{ ","\tint path[1000]; ","\tprintPathsRecur(node, path, 0); ","} ","","/* Recursive helper function -- given a node, ","and an array containing the path from the root ","node up to but not including this node, ","print out all the root-leaf paths.*/","void printPathsRecur(node* node, int path[], int pathLen) ","{ ","\tif (node == NULL) ","\t\treturn; ","\t","\t/* append this node to the path array */","\tpath[pathLen] = node->data; ","\tpathLen++; ","\t","\t/* it's a leaf, so print the path that led to here */","\tif (node->left == NULL && node->right == NULL) ","\t{ ","\t\tprintArray(path, pathLen); ","\t} ","\telse","\t{ ","\t\t/* otherwise try both subtrees */","\t\tprintPathsRecur(node->left, path, pathLen); ","\t\tprintPathsRecur(node->right, path, pathLen); ","\t} ","} ","","","/* UTILITY FUNCTIONS */","/* Utility that prints out an array on a line. */","void printArray(int ints[], int len) ","{ ","\tint i; ","\tfor (i = 0; i < len; i++) ","\t{ ","\t\tcout << ints[i] << \" \"; ","\t} ","\tcout<<endl; ","} ","","/* utility that allocates a new node with the ","given data and NULL left and right pointers. */","node* newnode(int data) ","{ ","\tnode* Node = new node(); ","\tNode->data = data; ","\tNode->left = NULL; ","\tNode->right = NULL; ","\t","\treturn(Node); ","} ","","/* Driver code*/","int main() ","{ ","\t","\t/* Constructed binary tree is ","\t\t\t\t10 ","\t\t\t/ \\ ","\t\t\t8 2 ","\t\t/ \\ / ","\t\t3 5 2 ","\t*/","\tnode *root = newnode(10); ","\troot->left = newnode(8); ","\troot->right = newnode(2); ","\troot->left->left = newnode(3); ","\troot->left->right = newnode(5); ","\troot->right->left = newnode(2); ","\t","\tprintPaths(root); ","\treturn 0; ","} ","","// This code is contributed by rathbhupendra ",""]}]]},"timestamp":1562707683201}