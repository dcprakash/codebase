{"filter":false,"title":"count-number-of-occurrences-or-frequency-in-a-sorted-array.cpp","tooltip":"/articles/count-number-of-occurrences-or-frequency-in-a-sorted-array.cpp","undoManager":{"mark":14,"position":14,"stack":[[{"start":{"row":0,"column":0},"end":{"row":5,"column":1},"action":"remove","lines":["#include <iostream>","","int main()","{","\tstd::cout << \"Hello from AWS Cloud9!\" << std::endl;","}"],"id":1},{"start":{"row":0,"column":0},"end":{"row":60,"column":1},"action":"insert","lines":["// C++ program to count occurrences of an element ","#include <bits/stdc++.h> ","using namespace std; ","  ","// A recursive binary search function. It returns ","// location of x in given array arr[l..r] is present, ","// otherwise -1 ","int binarySearch(int arr[], int l, int r, int x) ","{ ","    if (r < l) ","        return -1; ","  ","    int mid = l + (r - l) / 2; ","  ","    // If the element is present at the middle ","    // itself ","    if (arr[mid] == x) ","        return mid; ","  ","    // If element is smaller than mid, then ","    // it can only be present in left subarray ","    if (arr[mid] > x) ","        return binarySearch(arr, l, mid - 1, x); ","  ","    // Else the element can only be present ","    // in right subarray ","    return binarySearch(arr, mid + 1, r, x); ","} ","  ","// Returns number of times x occurs in arr[0..n-1] ","int countOccurrences(int arr[], int n, int x) ","{ ","    int ind = binarySearch(arr, 0, n - 1, x); ","  ","    // If element is not present ","    if (ind == -1) ","        return 0; ","  ","    // Count elements on left side. ","    int count = 1; ","    int left = ind - 1; ","    while (left >= 0 && arr[left] == x) ","        count++, left--; ","  ","    // Count elements on right side. ","    int right = ind + 1; ","    while (right < n && arr[right] == x) ","        count++, right++; ","  ","    return count; ","} ","  ","// Driver code ","int main() ","{ ","    int arr[] = { 1, 2, 2, 2, 2, 3, 4, 7, 8, 8 }; ","    int n = sizeof(arr) / sizeof(arr[0]); ","    int x = 2; ","    cout << countOccurrences(arr, n, x); ","    return 0; ","}"]}],[{"start":{"row":3,"column":1},"end":{"row":3,"column":2},"action":"remove","lines":[" "],"id":2}],[{"start":{"row":3,"column":0},"end":{"row":3,"column":1},"action":"remove","lines":[" "],"id":3}],[{"start":{"row":55,"column":42},"end":{"row":55,"column":43},"action":"remove","lines":["8"],"id":4}],[{"start":{"row":55,"column":39},"end":{"row":55,"column":40},"action":"remove","lines":["7"],"id":5}],[{"start":{"row":55,"column":38},"end":{"row":55,"column":39},"action":"remove","lines":[" "],"id":6}],[{"start":{"row":55,"column":37},"end":{"row":55,"column":38},"action":"remove","lines":[","],"id":7}],[{"start":{"row":55,"column":37},"end":{"row":55,"column":38},"action":"remove","lines":[","],"id":8}],[{"start":{"row":55,"column":37},"end":{"row":55,"column":38},"action":"remove","lines":[" "],"id":9}],[{"start":{"row":55,"column":27},"end":{"row":55,"column":28},"action":"remove","lines":["2"],"id":10}],[{"start":{"row":55,"column":26},"end":{"row":55,"column":27},"action":"remove","lines":[" "],"id":11}],[{"start":{"row":55,"column":25},"end":{"row":55,"column":26},"action":"remove","lines":[","],"id":12}],[{"start":{"row":55,"column":24},"end":{"row":55,"column":25},"action":"remove","lines":["2"],"id":13}],[{"start":{"row":55,"column":23},"end":{"row":55,"column":24},"action":"remove","lines":[" "],"id":14}],[{"start":{"row":55,"column":22},"end":{"row":55,"column":23},"action":"remove","lines":[","],"id":15}]]},"ace":{"folds":[],"scrolltop":798.5,"scrollleft":0,"selection":{"start":{"row":53,"column":11},"end":{"row":53,"column":11},"isBackwards":false},"options":{"guessTabSize":true,"useWrapMode":false,"wrapToView":true},"firstLineState":0},"hash":"394b5d42fd5bb17eef697bbb81f34c810bc46f62"}