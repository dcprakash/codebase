{"filter":false,"title":"check-if-a-given-binary-tree-is-sumtree.cpp","tooltip":"/articles/check-if-a-given-binary-tree-is-sumtree.cpp","undoManager":{"mark":0,"position":0,"stack":[[{"start":{"row":0,"column":0},"end":{"row":5,"column":1},"action":"remove","lines":["#include <iostream>","","int main()","{","\tstd::cout << \"Hello from AWS Cloud9!\" << std::endl;","}"],"id":1},{"start":{"row":0,"column":0},"end":{"row":78,"column":0},"action":"insert","lines":["#include <stdio.h> ","#include <stdlib.h> ","","/* A binary tree node has data, left child and right child */","struct node ","{ ","\tint data; ","\tstruct node* left; ","\tstruct node* right; ","}; ","","/* A utility function to get the sum of values in tree with root ","as root */","int sum(struct node *root) ","{ ","if(root == NULL) ","\treturn 0; ","return sum(root->left) + root->data + sum(root->right); ","} ","","/* returns 1 if sum property holds for the given ","\tnode and both of its children */","int isSumTree(struct node* node) ","{ ","\tint ls, rs; ","","\t/* If node is NULL or it's a leaf node then ","\treturn true */","\tif(node == NULL || ","\t\t\t(node->left == NULL && node->right == NULL)) ","\t\treturn 1; ","","/* Get sum of nodes in left and right subtrees */","ls = sum(node->left); ","rs = sum(node->right); ","","/* if the node and both of its children satisfy the ","\tproperty return 1 else 0*/","\tif((node->data == ls + rs)&& ","\t\t\tisSumTree(node->left) && ","\t\t\tisSumTree(node->right)) ","\t\treturn 1; ","","return 0; ","} ","","/* ","Helper function that allocates a new node ","with the given data and NULL left and right ","pointers. ","*/","struct node* newNode(int data) ","{ ","\tstruct node* node = ","\t\t(struct node*)malloc(sizeof(struct node)); ","\tnode->data = data; ","\tnode->left = NULL; ","\tnode->right = NULL; ","\treturn(node); ","} ","","/* Driver program to test above function */","int main() ","{ ","\tstruct node *root = newNode(26); ","\troot->left\t\t = newNode(10); ","\troot->right\t = newNode(3); ","\troot->left->left = newNode(4); ","\troot->left->right = newNode(6); ","\troot->right->right = newNode(3); ","\tif(isSumTree(root)) ","\t\tprintf(\"The given tree is a SumTree \"); ","\telse","\t\tprintf(\"The given tree is not a SumTree \"); ","","\tgetchar(); ","\treturn 0; ","} ",""]}]]},"ace":{"folds":[],"scrolltop":370.5,"scrollleft":0,"selection":{"start":{"row":24,"column":13},"end":{"row":24,"column":13},"isBackwards":false},"options":{"guessTabSize":true,"useWrapMode":false,"wrapToView":true},"firstLineState":{"row":17,"state":"start","mode":"ace/mode/c_cpp"}},"timestamp":1562628036610,"hash":"9ee191ef534ea75eb9b6e17e7663613ff4e50a60"}