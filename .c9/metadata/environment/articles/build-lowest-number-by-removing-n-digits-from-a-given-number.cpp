{"filter":false,"title":"build-lowest-number-by-removing-n-digits-from-a-given-number.cpp","tooltip":"/articles/build-lowest-number-by-removing-n-digits-from-a-given-number.cpp","undoManager":{"mark":5,"position":5,"stack":[[{"start":{"row":0,"column":0},"end":{"row":5,"column":1},"action":"remove","lines":["#include <iostream>","","int main()","{","\tstd::cout << \"Hello from AWS Cloud9!\" << std::endl;","}"],"id":1},{"start":{"row":0,"column":0},"end":{"row":59,"column":2},"action":"insert","lines":["// C++ program to build the smallest number by removing n digits from ","// a given number ","#include<iostream> ","using namespace std; ","  ","// A recursive function that removes 'n' characters from 'str' ","// to store the smallest possible number in 'res' ","void buildLowestNumberRec(string str, int n, string &res) ","{ ","    // If there are 0 characters to remove from str, ","    // append everything to result ","    if (n == 0) ","    { ","        res.append(str); ","        return; ","    } ","  ","    int len = str.length(); ","  ","    // If there are more characters to remove than string ","    // length, then append nothing to result ","    if (len <= n) ","        return; ","  ","    // Find the smallest character among first (n+1) characters ","    // of str. ","    int minIndex = 0; ","    for (int i = 1; i<=n ; i++) ","        if (str[i] < str[minIndex]) ","            minIndex = i; ","  ","    // Append the smallest character to result ","    res.push_back(str[minIndex]); ","  ","    // substring starting from minIndex+1 to str.length() - 1. ","    string new_str = str.substr(minIndex+1, len-minIndex); ","  ","    // Recur for the above substring and n equals to n-minIndex ","    buildLowestNumberRec(new_str, n-minIndex, res); ","} ","  ","// A wrapper over buildLowestNumberRec() ","string buildLowestNumber(string str, int n) ","{ ","    string res = \"\"; ","  ","    // Note that result is passed by reference ","    buildLowestNumberRec(str, n, res); ","  ","    return res; ","} ","  ","// Driver program to test above function ","int main() ","{ ","    string str = \"121198\"; ","    int n = 2; ","    cout << buildLowestNumber(str, n); ","    return 0; ","} "]}],[{"start":{"row":1,"column":18},"end":{"row":2,"column":0},"action":"insert","lines":["",""],"id":2}],[{"start":{"row":2,"column":0},"end":{"row":2,"column":1},"action":"insert","lines":["/"],"id":3}],[{"start":{"row":2,"column":1},"end":{"row":2,"column":2},"action":"insert","lines":["/"],"id":4}],[{"start":{"row":2,"column":2},"end":{"row":2,"column":3},"action":"insert","lines":[" "],"id":5}],[{"start":{"row":2,"column":3},"end":{"row":2,"column":94},"action":"insert","lines":["https://www.geeksforgeeks.org/build-lowest-number-by-removing-n-digits-from-a-given-number/"],"id":6}]]},"ace":{"folds":[],"scrolltop":0,"scrollleft":0,"selection":{"start":{"row":9,"column":2},"end":{"row":9,"column":2},"isBackwards":false},"options":{"guessTabSize":true,"useWrapMode":false,"wrapToView":true},"firstLineState":0},"hash":"7c7fd7b3aa3ce2bcb51f0a37991623657679a933","timestamp":1562623060363}